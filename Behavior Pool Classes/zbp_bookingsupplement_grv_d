CLASS lhc_zr_bookingsupplement_grv_d DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.

    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_bookingsupplement_grv_d~calculateTotalPrice.

    METHODS setBookSupplNumber FOR DETERMINE ON SAVE
      IMPORTING keys FOR zr_bookingsupplement_grv_d~setBookSupplNumber.
    METHODS validateSupplement FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_bookingsupplement_grv_d~validateSupplement.

ENDCLASS.

CLASS lhc_zr_bookingsupplement_grv_d IMPLEMENTATION.

  METHOD calculateTotalPrice.
    " Read all parent UUIDs
    READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
      ENTITY ZR_BookingSupplement_grv_D BY \_Travel
        FIELDS ( TravelUUID  )
        WITH CORRESPONDING #(  keys  )
      RESULT DATA(lt_travels).

    " Trigger Re-Calculation on Root Node
    MODIFY ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
      ENTITY zr_travel_grv_d
        EXECUTE reCalcTotalPrice
          FROM CORRESPONDING  #( lt_travels ).
  ENDMETHOD.

  METHOD setBookSupplNumber.
    DATA lv_max_bookingsupplementid TYPE /dmo/booking_supplement_id.
    DATA lt_bookingsupplements_update TYPE TABLE FOR UPDATE ZR_Travel_grv_D\\ZR_BookingSupplement_grv_D.

    "Read all bookings for the requested booking supplements
    " If multiple booking supplements of the same booking are requested, the booking is returned only once.
    READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
      ENTITY ZR_BookingSupplement_grv_D BY \_Booking
        FIELDS (  BookingUUID  )
        WITH CORRESPONDING #( keys )
      RESULT DATA(bookings).

    " Process all affected bookings. Read respective booking supplements for one booking
    LOOP AT bookings INTO DATA(ls_booking).
      READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
        ENTITY zr_booking_grv_d BY \_BookingSupplement
          FIELDS ( BookingSupplementID )
          WITH VALUE #( ( %tky = ls_booking-%tky ) )
        RESULT DATA(lt_bookingsupplements).

      " find max used bookingID in all bookings of this travel
      lv_max_bookingsupplementid = '00'.
      LOOP AT lt_bookingsupplements INTO DATA(ls_bookingsupplement).
        IF ls_bookingsupplement-BookingSupplementID > lv_max_bookingsupplementid.
          lv_max_bookingsupplementid = ls_bookingsupplement-BookingSupplementID.
        ENDIF.
      ENDLOOP.

      "Provide a booking supplement ID for all booking supplement of this booking that have none.
      LOOP AT lt_bookingsupplements INTO ls_bookingsupplement WHERE BookingSupplementID IS INITIAL.
        lv_max_bookingsupplementid += 1.
        APPEND VALUE #( %tky                = ls_bookingsupplement-%tky
                        bookingsupplementid = lv_max_bookingsupplementid
                      ) TO lt_bookingsupplements_update.

      ENDLOOP.
    ENDLOOP.

    " Provide a booking ID for all bookings that have none.
    MODIFY ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
      ENTITY ZR_BookingSupplement_grv_D
        UPDATE FIELDS ( BookingSupplementID ) WITH lt_bookingsupplements_update.
  ENDMETHOD.

  METHOD validateSupplement.
    READ ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
          ENTITY zr_bookingsupplement_grv_d
          FIELDS ( SupplementID )
          WITH CORRESPONDING #( keys )
          RESULT DATA(bookingsupplements)
          FAILED DATA(read_failed).

    failed = CORRESPONDING #( DEEP read_failed ).

    READ ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
         ENTITY zr_bookingsupplement_grv_d BY \_Booking
         FROM CORRESPONDING #( bookingsupplements )
         LINK DATA(booksuppl_booking_links).

    READ ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
         ENTITY zr_bookingsupplement_grv_d BY \_Travel
         FROM CORRESPONDING #( bookingsupplements )
         LINK DATA(booksuppl_travel_links).

    DATA supplements TYPE SORTED TABLE OF /dmo/supplement WITH UNIQUE KEY supplement_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    supplements = CORRESPONDING #( bookingsupplements DISCARDING DUPLICATES MAPPING supplement_id = SupplementID EXCEPT * ).
    DELETE supplements WHERE supplement_id IS INITIAL.

    IF supplements IS NOT INITIAL.
      " Check if customer ID exists
      SELECT FROM /dmo/supplement
        FIELDS supplement_id
        FOR ALL ENTRIES IN @supplements
        WHERE supplement_id = @supplements-supplement_id
        INTO TABLE @DATA(valid_supplements).
    ENDIF.

    LOOP AT bookingsupplements ASSIGNING FIELD-SYMBOL(<bookingsupplement>).

      APPEND VALUE #( %tky        = <bookingsupplement>-%tky
                      %state_area = 'VALIDATE_SUPPLEMENT' )
             TO reported-zr_bookingsupplement_grv_d.

      IF <bookingsupplement>-SupplementID IS INITIAL.
        APPEND VALUE #( %tky = <bookingsupplement>-%tky ) TO failed-zr_bookingsupplement_grv_d.

        APPEND VALUE #(
            %tky                  = <bookingsupplement>-%tky
            %state_area           = 'VALIDATE_SUPPLEMENT'
            %msg                  = NEW /dmo/cm_flight_messages( textid   = /dmo/cm_flight_messages=>enter_supplement_id
                                                                 severity = if_abap_behv_message=>severity-error )
            %path                 = VALUE #(
                zr_booking_grv_d-%tky = booksuppl_booking_links[ KEY id
                                                             source-%tky = <bookingsupplement>-%tky ]-target-%tky
                zR_Travel_grv_D-%tky  = booksuppl_travel_links[  KEY id
                                                            source-%tky = <bookingsupplement>-%tky ]-target-%tky )
            %element-SupplementID = if_abap_behv=>mk-on )
               TO reported-zr_bookingsupplement_grv_d.

      ELSEIF <bookingsupplement>-SupplementID IS NOT INITIAL AND NOT line_exists( valid_supplements[
                                                                                      supplement_id = <bookingsupplement>-SupplementID ] ).
        APPEND VALUE #( %tky = <bookingsupplement>-%tky ) TO failed-zr_bookingsupplement_grv_d.

        APPEND VALUE #(
            %tky                  = <bookingsupplement>-%tky
            %state_area           = 'VALIDATE_SUPPLEMENT'
            %msg                  = NEW /dmo/cm_flight_messages( textid   = /dmo/cm_flight_messages=>supplement_unknown
                                                                 severity = if_abap_behv_message=>severity-error )
            %path                 = VALUE #(
                zr_booking_grv_d-%tky = booksuppl_booking_links[ KEY id
                                                             source-%tky = <bookingsupplement>-%tky ]-target-%tky
                zR_Travel_grv_D-%tky  = booksuppl_travel_links[  KEY id
                                                            source-%tky = <bookingsupplement>-%tky ]-target-%tky )
            %element-SupplementID = if_abap_behv=>mk-on )
               TO reported-zr_bookingsupplement_grv_d.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
