CLASS lhc_zr_booking_grv_d DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.

    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_booking_grv_d~calculateTotalPrice.

    METHODS setBookingDate FOR DETERMINE ON SAVE
      IMPORTING keys FOR zr_booking_grv_d~setBookingDate.

    METHODS setBookingNumber FOR DETERMINE ON SAVE
      IMPORTING keys FOR zr_booking_grv_d~setBookingNumber.
    METHODS validateCustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_booking_grv_d~validateCustomer.

ENDCLASS.

CLASS lhc_zr_booking_grv_d IMPLEMENTATION.
  METHOD calculateTotalPrice.
    " Read all parent UUIDs
    READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
         ENTITY zr_booking_grv_d BY \_Travel
         FIELDS ( TravelUUID )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    " Trigger Re-Calculation on Root Node
    MODIFY ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
           ENTITY zr_travel_grv_d
           EXECUTE reCalcTotalPrice
           FROM CORRESPONDING #( lt_travels ).
  ENDMETHOD.

  METHOD setBookingDate.
    READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
           ENTITY zr_booking_grv_d
           FIELDS ( BookingDate )
           WITH CORRESPONDING #( keys )
           RESULT DATA(lt_bookings).

    DELETE lt_bookings WHERE BookingDate IS NOT INITIAL.
    IF lt_bookings IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT lt_bookings ASSIGNING FIELD-SYMBOL(<booking>).
      <booking>-BookingDate = cl_abap_context_info=>get_system_date( ).
    ENDLOOP.

    MODIFY ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
           ENTITY zr_booking_grv_d
           UPDATE FIELDS ( BookingDate )
           WITH CORRESPONDING #( lt_bookings ).
  ENDMETHOD.

  METHOD setBookingNumber.
    DATA lv_max_bookingid   TYPE /dmo/booking_id.
    DATA lt_bookings_update TYPE TABLE FOR UPDATE ZR_Travel_grv_D\\zr_booking_grv_d.

    " Read all travels for the requested bookings
    " If multiple bookings of the same travel are requested, the travel is returned only once.
    READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
         ENTITY zr_booking_grv_d BY \_Travel
         FIELDS ( TravelUUID )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    " Process all affected travels. Read respective bookings for one travel
    LOOP AT lt_travels INTO DATA(ls_travel).
      READ ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
           ENTITY zr_travel_grv_d BY \_Booking
           FIELDS ( BookingID )
           WITH VALUE #( ( %tky = ls_travel-%tky ) )
           RESULT DATA(lt_bookings).

      " find max used bookingID in all bookings of this travel
      lv_max_bookingid = '0000'.
      LOOP AT lt_bookings INTO DATA(ls_booking).
        IF ls_booking-BookingID > lv_max_bookingid.
          lv_max_bookingid = ls_booking-BookingID.
        ENDIF.
      ENDLOOP.

      " Provide a booking ID for all bookings of this travel that have none.
      LOOP AT lt_bookings INTO ls_booking WHERE BookingID IS INITIAL.
        lv_max_bookingid += 1.
        APPEND VALUE #( %tky      = ls_booking-%tky
                        BookingID = lv_max_bookingid )
               TO lt_bookings_update.

      ENDLOOP.
    ENDLOOP.

    " Provide a booking ID for all bookings that have none.
    MODIFY ENTITIES OF ZR_Travel_grv_D IN LOCAL MODE
           ENTITY zr_booking_grv_d
           UPDATE FIELDS ( BookingID )
           WITH lt_bookings_update.
  ENDMETHOD.

  METHOD validateCustomer.
    READ ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
       ENTITY zr_booking_grv_d
       FIELDS ( CustomerID )
       WITH CORRESPONDING #( keys )
       RESULT DATA(bookings).

    READ ENTITIES OF zR_Travel_grv_D IN LOCAL MODE
         ENTITY zr_booking_grv_d BY \_Travel
         FROM CORRESPONDING #( bookings )
         LINK DATA(travel_booking_links).

    DATA customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    customers = CORRESPONDING #( bookings DISCARDING DUPLICATES MAPPING customer_id = CustomerID EXCEPT * ).
    DELETE customers WHERE customer_id IS INITIAL.

    IF customers IS NOT INITIAL.
      " Check if customer ID exists
      SELECT FROM /dmo/customer
        FIELDS customer_id
        FOR ALL ENTRIES IN @customers
        WHERE customer_id = @customers-customer_id
        INTO TABLE @DATA(valid_customers).
    ENDIF.

    " Raise message for non existing customer id
    LOOP AT bookings INTO DATA(booking).
      APPEND VALUE #( %tky        = booking-%tky
                      %state_area = 'VALIDATE_CUSTOMER' ) TO reported-zr_booking_grv_d.

      IF booking-CustomerID IS INITIAL.
        APPEND VALUE #( %tky = booking-%tky ) TO failed-zr_booking_grv_d.

        APPEND VALUE #(
            %tky                = booking-%tky
            %state_area         = 'VALIDATE_CUSTOMER'
            %msg                = NEW /dmo/cm_flight_messages( textid   = /dmo/cm_flight_messages=>enter_customer_id
                                                               severity = if_abap_behv_message=>severity-error )
            %path               = VALUE #( zR_Travel_grv_D-%tky = travel_booking_links[
                                                                  KEY id
                                                                  source-%tky = booking-%tky ]-target-%tky )
            %element-CustomerID = if_abap_behv=>mk-on )
               TO reported-zr_booking_grv_d.

      ELSEIF booking-CustomerID IS NOT INITIAL AND NOT line_exists( valid_customers[
                                                                        customer_id = booking-CustomerID ] ).
        APPEND VALUE #( %tky = booking-%tky ) TO failed-zr_booking_grv_d.

        APPEND VALUE #(
            %tky                = booking-%tky
            %state_area         = 'VALIDATE_CUSTOMER'
            %msg                = NEW /dmo/cm_flight_messages( textid      = /dmo/cm_flight_messages=>customer_unkown
                                                               customer_id = booking-customerId
                                                               severity    = if_abap_behv_message=>severity-error )
            %path               = VALUE #(
                zR_Travel_grv_D-%tky = travel_booking_links[ KEY id
                                                         source-%tky = booking-%tky ]-target-%tky )
            %element-CustomerID = if_abap_behv=>mk-on )
               TO reported-zr_booking_grv_d.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
